from pwn import *
from sage.all import *

# find which -to-sign strings are just combinations of previous
# s and add them. Those are the subset-sigs in the file, ppl have to
# identify which s are subsets. The s for them can be
# generated by adding 
prev={    "00000100100011001011001000010001" : (6310196148199527212077807093329484586442739416253265018590080122682333096904352337973784738636208207725333771305486048420300832026794440950053627374629077,3024138628292462950314866041511685275088932337273391478422646075972079581669793221628340366353184953911960251170304162783613536290555709148743069758487401),"00001111100110011001100001001110"
            : (2216523313770281752088152844489427401744696564488434714861183813511402787473750755896393165636577871969737477837648354270724728429918305259202580072498675,4849731995087370189499019892091034871007077542068141078040742689591791580667769642567309177276104158751281522670024482115253720313136608816767598132851902),"00011011101001010001000101000101"
            : (1779582080766208354328348147605349881634212271203689585181949060419347394793199150884767648472851128458460863742098394583904796570726941071328131180255358,3681200757367320122440914937966654220689889795767731814154685624876601597035155459952820120647495188237603303075976818103647825763298065229326895669933737),"00100100010110001001000110101110"
            : (1389082497486834847517322098597025545265130069129371929895382558986911436013946231946869059552470026387507566252555981786447813938109560404937304888954391,3586593632449374366390623847854680604473818388726517919947286355939381676787780612254469210816020159879582722599956198127335337096623340158820759946064576),
            "01010000101001000100100010000000"
            : (5519244791700085722705439520825670005557500257232317570388035083408830673524699190252528507960225604441147221352163371883860010968816646888162632812679078,1135839167590065844455866360021749326144738612256671650117501323881413175032720109598027146633552543716778224431281526164341651418034270125647816677891413),"01010010101000010010111010010001"
            : (2940730783879498410969119014406863961871635289492565835107831816732219694576642178732827922115634961743357042802678859363811983052187231166707692512682878,344244060311984992173579320856463503252345755052703274873223730467164819442864852261661508616377845369845880650471838711998466279218133274892021840936832),"01011100001000011001110101011001"
            : (421568493094453570172752761459372679435461991269807101348052414187308280715956124685219422153508428854516756801128074294296418222252784410009412312021523,5546701769961346750511099313590999406682905972729080955304850217595237314569522525504838122676991317675839417527311948717521099785601147181303603571231735),"01101001001000110000110011101010"
            : (680444847584102421948488197708512959924593251237756636403011026770558369324931669484723901214461178806690724346502659154771976746876846631653029442323946,4843345142304026485264376523789856030370536020048591996618852434942755268014816245233001136434518719027366879276794461699215897365338128856866752763382039),"01100000011000100110000110010001"
            : (3080183562341727813161158995838663464286172947990005122353339436642864689586168850221883680309732714344549105422439147305279047117410656161204416033608911,6494869734898303742160933038630993385971975527550356673027322738191210833221553902953764075639601820881273012088390074477001134894070686091028335024737525),"10000011010110000110001010100010"
            : (2551296538409081432725108897381122494858016055577540699342148068862124963081534378346246575444772862281218226079938148251367680014865410021649874534787032,2768854396558776805291485882514533714473119130902113797805157526985922870086969696483347029270000695937533778559543716860383399056545722928761195923938490),"10001110101010011100111001111000"
            : (1287594939080921875488161286016621453482754297204405994742346179163302802837243233126376078334116242319516900333012368917833873088958007793400318122888769,3984309473374817975340527784201545614673738771145847809758097368569237846634107491988769392479796535750589788463621066036741232276265243716983707478008058),"10011011110110001100001111000111"
            : (381860296571044950099863994790264688984002362084676156564317220631572396350455273512615073849409285166043287589645585960096074622621730312944772071570037,3789145409916811029064324900025182831007556780564978428256375478141481732574256617999498876373068204260413141037552774254345795094345475749312341208849410),"10100100010110000011000101110100"
            : (1561910179023106772013889851075950770221797825040360078640160501670972185166360399735045542450197958703314085095441694059621845591206662704191533885162720,750152503393622363232463339718136139914994937846680715239821350603074664821686134819847068736354150794917259321485084921806171573923147098377830851273457),"10101010111110011100010010001000"
            : (3459884609907065826314755049435185184072510682773565378531122416786136872925697460641917883958588417851776257665782020176058511818373819629596164790384246,5957484421263722045101862440983247871331507199240613515626480811819113942663435596334462785949411745889740730404883216082046686367526062022316651693530712),"11010010110010001010010011001010"
            : (876580284109397577169582107782993863656695502082134279549033095361894290377317064555356698089402554886461845578622721266773318417422121842532916803667066,2468190268583516058260220256943123282782683571917066411085019687849027107921209103065501029611214814523888384728003192988476697532116648209428792454802797),"11010100000010110110000100100000"
            : (2937190058527899744594945145196647724763878776716537058655830159553120787020267511648802798282334603088744984505163438547923379785947269454475450251296394,3776113332211237122220639956630090581958995177704149604469829395311330279490444682025884720134025043696823721781272381028617135322334795914888230110169679),"11011111001100011011010100110011"
            : (1463426809851213135326344249118834959292044254926386906964261574115950572573798723778109341091337049760749799574532815429266679661464828248902646198050170,5576747779210888970667061046727981057999151785008233246309571216207149339768028915815543707515963423784276043298930004202203913834436034494173895253084251),"11100110011001000011001010010111"
            : (3343853828632608641673538130325674089364750211053568083508000657327741798825035861590436106252071414019303799867841743507958579948956725174820951385252160,2238501916143800244810875732552844106419713407111958179058684084647145458249941919040755525041724907746900427886276985326083406425225404392477009160623054),
            "11110011001101000001011010110001"
            : (5313504210654745016687360955205504283574236753365668028323519063786744981817524520863907770230983682504717248557910536271864151387060934083330950948884300,870621457020050143833520826394064359163264152557164440327625217731989014980361057207483851885216990188305927429564660944484502771289919702070585620071679),"11111111100001011111000100000000":
            (1433428191669819493029290431792890340580692998852227701251616898166724664259285400404118830313308804032453038176497052122081398901479774380412554643321872,458296366601264198222889199383371533763203410937751967498243152640398427118942477271696419742648889326730459520565580212439427822182836206046575999465661)}


conn=remote('127.0.0.1', 1337)
challenges=[]
for i in range(20): 
    challenges.append(conn.recvline().strip())
print(conn.recvuntil(b'strings'))
    
# base field for M-221
A=530438
p=2**511 - 187
e=EllipticCurve(GF(p), [A,1])


# these are the working ones, but the contestants need a loop to find out which
# combinations work with the input

for h in challenges: 
    h=h.decode()
    h=int(h,2)
    for a in prev: 
        b=prev[a]
        a=int(a,2)
        for n in prev: 
            m=prev[n]
            n=int(n, 2)
            if (a+n)==h: 
               res=e(b)+e(m)
               res=str(res.xy()).strip()
               res=res.encode()
               print(res)
               conn.sendline(res)
               print(conn.recvuntil(b'dctf{'))
               print(conn.recvline())
               break


